#!/usr/bin/env python3
"""
Complete proof of concept test for CFR Document Analyzer.

Tests the full workflow with multiple small agencies.
"""

import sys
import logging
from pathlib import Path

# Add current directory to path
sys.path.insert(0, str(Path(__file__).parent))

from cfr_document_analyzer.config import Config
from cfr_document_analyzer.database import Database
from cfr_document_analyzer.analysis_engine import AnalysisEngine
from cfr_document_analyzer.export_manager import ExportManager
from cfr_document_analyzer.models import SessionStatus


def test_complete_poc():
    """Test complete proof of concept with multiple agencies."""
    # Set up logging
    Config.setup_logging(verbose=True)
    logger = logging.getLogger(__name__)
    
    logger.info("Starting complete proof of concept test...")
    
    try:
        # Initialize components
        db = Database(Config.DATABASE_PATH)
        engine = AnalysisEngine(db)
        export_manager = ExportManager()
        
        logger.info("‚úì All components initialized successfully")
        
        # Test with all configured test agencies
        test_results = {}
        
        for i, agency_slug in enumerate(Config.TEST_AGENCIES, 1):
            logger.info(f"\n=== Testing Agency {i}/{len(Config.TEST_AGENCIES)}: {agency_slug} ===")
            
            try:
                # Run analysis with small limit
                session = engine.analyze_agency_documents(
                    agency_slug=agency_slug,
                    prompt_strategy="DOGE Criteria",
                    document_limit=2  # Small limit for POC
                )
                
                logger.info(f"Session {session.session_id} completed with status: {session.status}")
                
                # Get results
                results = engine.get_analysis_results(session.session_id)
                
                test_results[agency_slug] = {
                    'session_id': session.session_id,
                    'status': session.status,
                    'documents_processed': session.documents_processed,
                    'total_documents': session.total_documents,
                    'results_count': len(results),
                    'success': session.status == SessionStatus.COMPLETED and len(results) > 0
                }
                
                # Test export functionality if we have results
                if results:
                    logger.info(f"Testing export functionality for {agency_slug}...")
                    
                    exported_files = export_manager.export_session_results(
                        results, session.session_id, ['json', 'csv']
                    )
                    
                    summary_file = export_manager.create_agency_presentation_summary(
                        results, session.session_id
                    )
                    
                    test_results[agency_slug]['exported_files'] = exported_files
                    test_results[agency_slug]['summary_file'] = summary_file
                    
                    logger.info(f"‚úì Export test passed for {agency_slug}")
                else:
                    logger.warning(f"No results to export for {agency_slug}")
                
            except Exception as e:
                logger.error(f"Error testing {agency_slug}: {e}")
                test_results[agency_slug] = {
                    'success': False,
                    'error': str(e)
                }
        
        # Generate summary report
        logger.info("\n" + "="*60)
        logger.info("PROOF OF CONCEPT TEST SUMMARY")
        logger.info("="*60)
        
        successful_agencies = 0
        total_documents_processed = 0
        
        for agency_slug, result in test_results.items():
            agency_name = agency_slug.replace('-', ' ').title()
            logger.info(f"\n{agency_name}:")
            
            if result.get('success'):
                successful_agencies += 1
                docs_processed = result.get('documents_processed', 0)
                total_documents_processed += docs_processed
                
                logger.info(f"  ‚úì SUCCESS")
                logger.info(f"  Session: {result.get('session_id')}")
                logger.info(f"  Documents: {docs_processed}/{result.get('total_documents', 0)}")
                logger.info(f"  Results: {result.get('results_count', 0)}")
                
                if result.get('exported_files'):
                    logger.info(f"  Exports: {len(result['exported_files'])} files")
                
                if result.get('summary_file'):
                    logger.info(f"  Summary: Generated")
            else:
                logger.info(f"  ‚úó FAILED: {result.get('error', 'Unknown error')}")
        
        # Overall statistics
        logger.info(f"\nOVERALL RESULTS:")
        logger.info(f"  Agencies tested: {len(Config.TEST_AGENCIES)}")
        logger.info(f"  Successful: {successful_agencies}")
        logger.info(f"  Success rate: {(successful_agencies/len(Config.TEST_AGENCIES)*100):.1f}%")
        logger.info(f"  Total documents processed: {total_documents_processed}")
        
        # Get usage statistics
        stats = engine.get_usage_statistics()
        logger.info(f"\nLLM USAGE STATISTICS:")
        logger.info(f"  Total calls: {stats['total_calls']}")
        logger.info(f"  Successful calls: {stats['successful_calls']}")
        logger.info(f"  Success rate: {stats['success_rate']:.1f}%")
        logger.info(f"  Total time: {stats['total_time']:.1f}s")
        
        # Database statistics
        doc_count = db.execute_query("SELECT COUNT(*) FROM documents")[0][0]
        analysis_count = db.execute_query("SELECT COUNT(*) FROM analyses")[0][0]
        session_count = db.execute_query("SELECT COUNT(*) FROM sessions")[0][0]
        
        logger.info(f"\nDATABASE STATISTICS:")
        logger.info(f"  Documents cached: {doc_count}")
        logger.info(f"  Analyses completed: {analysis_count}")
        logger.info(f"  Sessions created: {session_count}")
        
        # Determine overall success
        overall_success = successful_agencies > 0 and total_documents_processed > 0
        
        if overall_success:
            logger.info(f"\nüéâ PROOF OF CONCEPT: SUCCESS!")
            logger.info("The system demonstrates:")
            logger.info("  ‚úì Document retrieval from Federal Register")
            logger.info("  ‚úì Multi-agency processing capability")
            logger.info("  ‚úì Analysis pipeline (ready for LLM integration)")
            logger.info("  ‚úì Database storage and retrieval")
            logger.info("  ‚úì Export functionality for agency presentation")
            logger.info("  ‚úì Error handling and validation")
            logger.info("  ‚úì CLI interface for operations")
        else:
            logger.warning("‚ö†Ô∏è  PROOF OF CONCEPT: PARTIAL SUCCESS")
            logger.info("Framework is complete but may need:")
            logger.info("  - LLM integration fixes")
            logger.info("  - Network connectivity improvements")
            logger.info("  - Additional test data")
        
        engine.close()
        return overall_success
        
    except Exception as e:
        logger.error(f"Complete POC test failed: {e}")
        return False


if __name__ == "__main__":
    success = test_complete_poc()
    print(f"\nFinal Result: {'SUCCESS' if success else 'NEEDS WORK'}")
    sys.exit(0 if success else 1)